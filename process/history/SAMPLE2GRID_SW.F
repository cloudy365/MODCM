C FILE: SAMPLE2GRID_SW.F
C USEAGE:
C       f2py -m sample2grid_sw -c SAMPLE2GRID_SW.F
C TO GENERATE PYTHON USABLE .SO FILE

       SUBROUTINE SORT(NUM_CHANNEL, NUM_SAMPLE, VALID_X, VALID_Y,
     & NUM_LINE, LATS, LONS, IDX_LATS, IDX_LONS, 
     & RADS, SOLS, RADS_MAX,
     & CUMU_INSOL, CUMU_RAD, CUMU_NUM,
     & SUM_INSOL, SUM_RADIANCE, SUM_NUM)


C     NUMBER OF VALID SAMPLE (NUM_SAMPLE) AND CORRESPONDING INDEXES (VALID_X, VALID_Y)
C     NUMBER OF CHANNELS (NUM_CHANNEL)
      INTEGER NUM_SAMPLE, NUM_CHANNEL
      INTEGER, DIMENSION(NUM_SAMPLE) :: VALID_X, VALID_Y


C     NUMBER OF IMAGE LINES AND CORRESPONDING LAT/LON (INDEXES)
      INTEGER NUM_LINE
      REAL, DIMENSION(NUM_LINE, 1354) :: LATS, LONS
      INTEGER, DIMENSION(NUM_LINE, 1354) :: IDX_LATS, IDX_LONS

C     GRANULE RADIANCE DATA
      REAL, DIMENSION(NUM_LINE, 1354, NUM_CHANNEL) :: RADS, SOLS
      REAL, DIMENSION(NUM_CHANNEL) :: RADS_MAX


C     DAILY RADIANCE DATA
      REAL, DIMENSION(3600, 7200, NUM_CHANNEL) :: CUMU_INSOL, CUMU_RAD
      INTEGER(4), DIMENSION(3600, 7200, NUM_CHANNEL) :: CUMU_NUM


C     OUTPUT ARRAY
      REAL, DIMENSION(3600, 7200, NUM_CHANNEL) :: SUM_INSOL, 
     & SUM_RADIANCE
      INTEGER(4), DIMENSION(3600, 7200, NUM_CHANNEL) :: SUM_NUM


C     INTERNAL USE INDEXES
      INTEGER ISAMPLE, Y, X, IDX_X, IDX_Y, ICHANNEL
      INTEGER, DIMENSION(NUM_CHANNEL) :: INUM
      REAL ILAT, ILON, ILAT_PRE
      REAL, DIMENSION(NUM_CHANNEL) :: IRAD, ISOL


Cf2py intent(in) num_channel, num_sample, num_line
Cf2py intent(in) valid_x, valid_y 
Cf2py intent(in) lats, lons, idx_lats, idx_lons
Cf2py intent(in) rads, sols, rads_max
Cf2py intent(in) cumu_insol, cumu_rad, cumu_num
Cf2py intent(out) sum_insol, sum_radiance, sum_num
Cf2py depend(num_sample) valid_x, valid_y
Cf2py depend(num_line) lats, lons, idx_lats, idx_lons, rads, sols
Cf2py depend(num_channel) rads, sols, rads_max, cumu_insol, cumu_rad, cumu_num
Cf2py depend(num_channel) sum_insol, sum_radiance, sum_num


      DO ISAMPLE = 1, NUM_SAMPLE

C     ADD 1 SINCE FORTRAN STARTS FROM 1 WHILE LATS_IDX/LONS_IDX WERE 
C     GENERATED BY PYTHON.
         Y = VALID_Y(ISAMPLE) + 1
         X = VALID_X(ISAMPLE) + 1

         ILAT = LATS(Y, X)
         IF (Y.EQ.1) THEN
            ILAT_PRE = ILAT
         ELSE
            ILAT_PRE = LATS(Y-1, X)
         ENDIF
         ILON = LONS(Y, X)
         IRAD = RADS(Y, X, :)
         ISOL = SOLS(Y, X, :)


C     FETCH INDEXES IN THE OUTPUT ARRAY.
C     ADD 1 DUE TO FORTRAN STARTS FROM 1 WHILE LATS_IDX/LONS_IDX WERE 
C     GENERATED BY PYTHON.
         IDX_Y = IDX_LATS(Y, X) + 1
         IDX_X = IDX_LONS(Y, X) + 1


C     CHECK LATLON ARRAY
         IF (ILAT.GE.ILAT_PRE .OR. ILAT.LE.-999. .OR. ILON.LE.-999
     & .OR. IDX_Y.EQ.3601 .OR. IDX_X.EQ.7201) THEN
            CYCLE
         ENDIF


C     CHECK RADIANCE ARRAY
         DO ICHANNEL = 1, NUM_CHANNEL
            IF (IRAD(ICHANNEL).LE.0
     & .OR. IRAD(ICHANNEL).GT.RADS_MAX(ICHANNEL)) THEN
               IRAD(ICHANNEL) = 0
               ISOL(ICHANNEL) = 0
               INUM(ICHANNEL) = 0
            ELSE
               INUM(ICHANNEL) = 1
            ENDIF
         ENDDO


C          WRITE(*, *) I, J, IDX_Y, IDX_X
         SUM_INSOL(IDX_Y, IDX_X, :) = 
     & SUM_INSOL(IDX_Y, IDX_X, :) + ISOL
         SUM_RADIANCE(IDX_Y, IDX_X, :) = 
     & SUM_RADIANCE(IDX_Y, IDX_X, :) + IRAD
         SUM_NUM(IDX_Y, IDX_X, :) = 
     & SUM_NUM(IDX_Y, IDX_X, :) + INUM

      ENDDO


      SUM_INSOL = SUM_INSOL + CUMU_INSOL
      SUM_RADIANCE = SUM_RADIANCE + CUMU_RAD
      SUM_NUM = SUM_NUM + CUMU_NUM


      END
C END FILE SAMPLE2GRID_SW.F
